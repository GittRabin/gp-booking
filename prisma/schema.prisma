datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  PATIENT
  DOCTOR
  ADMIN
}

model User {
  id            String         @id @default(cuid())
  name          String
  username      String?        @unique
  email         String         @unique
  password      String
  emailVerified DateTime?
  image         String?
  sessions      Session[]
  accounts      Account[]
  authenticator Authenticator?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  doctor        Doctor?
  patient       Patient?
  admin         Admin?
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String  @unique
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Clinic {
  id           String         @id @default(cuid())
  name         String
  location     String
  postcode     String?
  doctors      ClinicDoctor[]
  appointments Appointment[]
}

model Doctor {
  id           String              @id @default(cuid())
  userId       String              @unique
  name         String
  location     String
  postcode     String?
  user         User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  appointments DoctorAppointment[]
  clinics      ClinicDoctor[]
}

model Patient {
  id           String               @id @default(cuid())
  name         String
  userId       String               @unique
  user         User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Appointment {
  id          String              @id @default(cuid())
  date        DateTime
  time        String
  patientId   String
  clinicId    String
  clinic      Clinic              @relation(fields: [clinicId], references: [id], onDelete: NoAction)
  status      AppointmentStatus   @default(PENDING)
  createdAt   DateTime            @default(now())
  modifiedAt  DateTime            @updatedAt
  confirmedBy String?
  doctors     DoctorAppointment[]

}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  RESCHEDULED
  COMPLETED
}

model DoctorAppointment {
  id            String      @id @default(cuid())
  doctorId      String
  appointmentId String
  doctor        Doctor      @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
}

model ClinicDoctor {
  id       String @id @default(cuid())
  doctorId String
  clinicId String
  doctor   Doctor @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  clinic   Clinic @relation(fields: [clinicId], references: [id], onDelete: Cascade)
}

model Admin {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}
